-- Oyun yüklenene kadar bekle
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- GUI kütüphaneleri
local repo = 'https://raw.githubusercontent.com/KINGHUB01/Gui/main/'
local library = loadstring(game:HttpGet(repo .. 'Gui%20Lib%20%5BLibrary%5D'))()
local theme_manager = loadstring(
    game:HttpGet(repo .. 'Gui%20Lib%20%5BThemeManager%5D')
)()
local save_manager = loadstring(
    game:HttpGet(repo .. 'Gui%20Lib%20%5BSaveManager%5D')
)()

-- Pencere oluştur
local window = library:CreateWindow({
    Title = 'Atlas Ware | discord.gg/vqKfva9e',
    Center = true,
    AutoShow = true,
})

-- Sekmeler
local tabs = {
    main = window:AddTab('Main'),
    ['ui settings'] = window:AddTab('UI Settings'),
    credits = window:AddTab('Credits'),
}

-- Gruplar
local game_group = tabs.main:AddLeftGroupbox('Game Settings')
local stats_group = tabs.main:AddRightGroupbox('Stats & Info')
local timer_group = tabs.main:AddRightGroupbox('Timers')
local menu_group = tabs['ui settings']:AddLeftGroupbox('Menu Settings')
local credits_group = tabs.credits:AddLeftGroupbox('Credits')

-- Servisler
local replicated_storage = cloneref(game:GetService('ReplicatedStorage'))
local tween_service = cloneref(game:GetService('TweenService'))
local run_service = cloneref(game:GetService('RunService'))
local stats = cloneref(game:GetService('Stats'))
local workspace = cloneref(game:GetService('Workspace'))
local players = cloneref(game:GetService('Players'))
local local_player = players.LocalPlayer
local info = game:GetService('MarketplaceService'):GetProductInfo(game.PlaceId)

-- Tema ve kayıt ayarları
theme_manager:SetLibrary(library)
save_manager:SetLibrary(library)
save_manager:IgnoreThemeSettings()
save_manager:SetIgnoreIndexes({ 'MenuKeybind' })
theme_manager:SetFolder('AtlasWare')
save_manager:SetFolder('AtlasWare/DSS3')
save_manager:BuildConfigSection(tabs['ui settings'])
theme_manager:ApplyToTab(tabs['ui settings'])
save_manager:LoadAutoloadConfig()

-- Sabit Gemi İsimleri
local shipNames = {
    'Ace-class RO/RO',
    'Alabama-class container ship',
    'Bulk carrier',
    'Arctic-class LNG carrier',
    'Cruise ship',
    'Fitzgerald-class laker',
    'G2-class carrier',
    'Heavy bulk carrier',
    'Light container ship',
    'Lusitania-class ocean liner',
    'Mariner-class RO/RO',
}

-- Dock koordinatları
local docks = {
    -- Bulk Docks
    ['BulkDock1'] = CFrame.new(26060.318, -39.065, -9820.296),
    ['BulkDock2'] = CFrame.new(-3837.393, -39.065, 22198.232),
    ['BulkDock3'] = CFrame.new(32443.709, -39.065, 14784.733),
    ['BulkDock4'] = CFrame.new(-27254.541, -39.065, -18065.66),
    ['BulkDock5'] = CFrame.new(-14125.276, -39.065, -43640.438),

    -- Container Docks
    ['ContainerDock1'] = CFrame.new(26801.992, -30.315, -7070.906),
    ['ContainerDock2'] = CFrame.new(-5978.055, -30.315, 26995.453),
    ['ContainerDock3'] = CFrame.new(-14469.223, -30.315, -43598.836),
    ['ContainerDock4'] = CFrame.new(-26785.793, -30.315, -14709.691),
    ['ContainerDock5'] = CFrame.new(-27036.588, -30.315, -16705.451), -- Adjusted, you can fix if needed

    -- Ferry Docks
    ['FerryDock1'] = CFrame.new(26400.57, -30.315, -10151.258),
    ['FerryDock2'] = CFrame.new(-7291.174, -30.315, 25578.182),
    ['FerryDock3'] = CFrame.new(-15042.902, -30.315, -43761.18),
    ['FerryDock4'] = CFrame.new(-7557.043, -34.744, 23796.688),
    ['FerryDock5'] = CFrame.new(-4585.654, -34.188, 35438.57),
    ['FerryDock6'] = CFrame.new(-3316.531, -34.188, 35089.848),
    ['FerryDock7'] = CFrame.new(-27036.588, -30.315, -16705.451), -- Adjust as needed
    ['FerryDock8'] = CFrame.new(-4585.654, -34.188, 35438.57), -- Adjust as needed

    -- General Docks
    ['GeneralDock1'] = CFrame.new(-15040.437, -22.743, 29779.336),
    ['GeneralDock2'] = CFrame.new(27387.744, -22.743, -8955.782),
    ['GeneralDock3'] = CFrame.new(-5804.001, -22.743, -62573.496),
    ['GeneralDock4'] = CFrame.new(-14933.396, -22.743, -43339.762),
    ['GeneralDock5'] = CFrame.new(-4789.512, -22.743, 28017.043),
    ['GeneralDock6'] = CFrame.new(32991.484, -30.315, 14242.64),
    ['GeneralDock7'] = CFrame.new(49172.387, -22.743, -3284.313),
    ['GeneralDock8'] = CFrame.new(29046.385, -22.743, -23017.535),
}

-- Seçim değişkenleri
local selected_ships = nil
local selectedDockLoad = nil
local selectedDockUnload = nil
local tweenSpeed = 120 -- varsayılan 120 (kick yeme için düşük hız)
local waitTime = 90

-- UI dropdown ve slider
local dockNames = {}
for name, _ in pairs(docks) do
    table.insert(dockNames, name)
end

game_group:AddDropdown('ship_selector', {
    Values = shipNames,
    Default = shipNames[1],
    Text = 'Select Ship:',
    Callback = function(v)
        selected_ships = v
    end,
})

game_group:AddDropdown('dock_load_selector', {
    Values = dockNames,
    Default = dockNames[1],
    Text = 'Select Load Dock:',
    Callback = function(v)
        selectedDockLoad = v
    end,
})

game_group:AddDropdown('dock_unload_selector', {
    Values = dockNames,
    Default = dockNames[2] or dockNames[1],
    Text = 'Select Unload Dock:',
    Callback = function(v)
        selectedDockUnload = v
    end,
})

game_group:AddSlider('TweenSpeed', {
    Text = 'Tween Speed',
    Default = tweenSpeed,
    Min = 50,
    Max = 500,
    Rounding = 0,
    Callback = function(val)
        tweenSpeed = val
    end,
})

game_group:AddSlider('WaitTime', {
    Text = 'Wait Time (secs)',
    Default = waitTime,
    Min = 30,
    Max = 300,
    Rounding = 0,
    Callback = function(val)
        waitTime = val
    end,
})

-- Autofarm kontrol değişkeni
local running = false

-- Bildirim fonksiyonu
local function notify(msg)
    pcall(function()
        game:GetService('StarterGui'):SetCore('SendNotification', {
            Title = 'Atlas Ware',
            Text = msg,
            Duration = 3,
        })
    end)
end

-- Gemi bulucu
local function findPlayerShip(name)
    for _, v in pairs(workspace:GetDescendants()) do
        if v.Name == name and v:FindFirstChild('Regen') then
            local seat = v.Regen:FindFirstChild('Gunboat')
                and v.Regen.Gunboat:FindFirstChild('VehicleSeat')
            local owner = seat
                and seat:FindFirstChild('ShipControl')
                and seat.ShipControl:FindFirstChild('OWNER')
            if owner and owner.Value == local_player then
                if not v.PrimaryPart then
                    v.PrimaryPart = v.Regen.Gunboat:FindFirstChild('Base')
                        or v.Regen.Gunboat:FindFirstChildWhichIsA('BasePart')
                end
                return v
            end
        end
    end
end

-- Tween taşıma fonksiyonu (tamamlanmayı bekler)
local function moveShipTweened(ship, goalCFrame)
    if not ship or not ship.PrimaryPart then
        return
    end
    local startPos = ship.PrimaryPart.Position
    local goalPos = goalCFrame.Position
    local dist = (startPos - goalPos).Magnitude
    local tweenInfo = TweenInfo.new(dist / tweenSpeed, Enum.EasingStyle.Linear)

    local tweens = {}
    local offset = goalPos - startPos
    for _, part in ipairs(ship:GetDescendants()) do
        if part:IsA('BasePart') then
            local tween = tween_service:Create(
                part,
                tweenInfo,
                { CFrame = part.CFrame + offset }
            )
            tween:Play()
            table.insert(tweens, tween)
        end
    end

    for _, tween in ipairs(tweens) do
        tween.Completed:Wait()
    end
end

-- Lisans ve zaman hesaplamaları (isteğe göre)
local licenseStartTime = os.time()
local licenseDurationSeconds = 30 * 24 * 60 * 60

local function getLicenseRemainingTimeSeconds()
    local remaining = (licenseStartTime + licenseDurationSeconds) - os.time()
    if remaining < 0 then
        return 0
    end
    return remaining
end

local function getLicenseTimeParts()
    local remaining = getLicenseRemainingTimeSeconds()
    local days = math.floor(remaining / 86400)
    local hours = math.floor((remaining % 86400) / 3600)
    local minutes = math.floor((remaining % 3600) / 60)
    local seconds = remaining % 60
    return days, hours, minutes, seconds
end

-- Otomatik kargo alma ve satma döngüsü
local function startAutoFarm()
    if running then
        notify('Already running.')
        return
    end
    running = true

    spawn(function()
        while running do
            if
                not selected_ships
                or not selectedDockLoad
                or not selectedDockUnload
            then
                notify('Please select ship, load dock and unload dock!')
                running = false
                break
            end

            local ship = findPlayerShip(selected_ships)
            if not ship then
                notify('Your ship not found in workspace.')
                running = false
                break
            end

            -- Gemi yükleme limanına git
            notify('Going to load dock: ' .. selectedDockLoad)
            local loadDockCFrame = docks[selectedDockLoad]
            moveShipTweened(ship, loadDockCFrame)
            notify('Arrived at load dock.')

            -- Load dock objesi workspace'de var mı kontrol et
            local loadDockPart = workspace:FindFirstChild(selectedDockLoad)
            if loadDockPart then
                workspace.HandleCargoEvent:FireServer(
                    'load',
                    ship,
                    loadDockPart
                )
                notify('Cargo loaded.')
            else
                notify('Load dock object not found! Skipping load.')
            end

            wait(waitTime) -- Kargo yükleme bekleme süresi

            -- Kargo boşaltma limanına git
            notify('Going to unload dock: ' .. selectedDockUnload)
            local unloadDockCFrame = docks[selectedDockUnload]
            moveShipTweened(ship, unloadDockCFrame)
            notify('Arrived at unload dock.')

            local unloadDockPart = workspace:FindFirstChild(selectedDockUnload)
            if unloadDockPart then
                workspace.HandleCargoEvent:FireServer(
                    'unload',
                    ship,
                    unloadDockPart
                )
                notify('Cargo unloaded.')
            else
                notify('Unload dock object not found! Skipping unload.')
            end

            wait(waitTime) -- Kargo boşaltma bekleme süresi

            -- Gemi tekrar yükleme limanına geri dönsün
            notify('Returning to load dock for next cycle.')
            moveShipTweened(ship, loadDockCFrame)
            notify('Ready for next cycle.')
            wait(2)
        end
    end)
end

local function stopAutoFarm()
    running = false
    notify('AutoFarm stopped.')
end

game_group:AddButton('Start Autofarm', function()
    startAutoFarm()
end)

game_group:AddButton('Stop Autofarm', function()
    stopAutoFarm()
end)

-- Menü tuşu ataması
menu_group:AddKeyPicker('MenuKeybind', {
    Text = 'Menu Toggle',
    Default = 'RightControl',
    NoUI = true,
    Mode = 'Toggle',
})

library:SetMenuKeybind(menu_group:Get('MenuKeybind').Value)
library:Init()

-- Credits
credits_group:AddLabel('Atlas Ware')
credits_group:AddLabel('Discord: discord.gg/vqKfva9e')

-- Lisans ve süre güncelleme timer
local licenseTimer = timer_group:AddLabel('License Remaining: Calculating...')

spawn(function()
    while true do
        local d, h, m, s = getLicenseTimeParts()
        licenseTimer:SetText(
            string.format('License Remaining: %dd %dh %dm %ds', d, h, m, s)
        )
        wait(1)
    end
end)
